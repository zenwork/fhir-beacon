{
  "$schema": "https://raw.githubusercontent.com/JetBrains/web-types/master/schema/web-types.json",
  "name": "fhir-beacon",
  "version": "0.0.1",
  "description-markup": "markdown",
  "contributions": {
    "html": {
      "elements": [
        {
          "name": "fhir-shell",
          "description": "\n---\n",
          "doc-url": "",
          "attributes": [
            { "name": "mode", "value": { "type": "DisplayMode" } },
            {
              "name": "open",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "verbose",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "showerror",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "summaryonly",
              "value": { "type": "boolean", "default": "false" }
            }
          ],
          "events": [],
          "js": {
            "properties": [
              { "name": "mode", "type": "DisplayMode" },
              { "name": "open", "type": "boolean" },
              { "name": "verbose", "type": "boolean" },
              { "name": "showerror", "type": "boolean" },
              { "name": "summaryonly", "type": "boolean" }
            ],
            "events": []
          }
        },
        {
          "name": "fhir-not-supported",
          "description": "\n---\n",
          "doc-url": "",
          "attributes": [
            { "name": "description", "value": { "type": "string" } },
            { "name": "label", "value": { "type": "string" } },
            { "name": "error", "value": { "type": "string" } },
            { "name": "variant", "value": { "type": "string" } }
          ],
          "events": [],
          "js": {
            "properties": [
              { "name": "description", "type": "string" },
              { "name": "label", "type": "string" },
              { "name": "error", "type": "string" },
              { "name": "variant", "type": "string" }
            ],
            "events": []
          }
        },
        {
          "name": "fhir-primitive",
          "description": "Represents a custom element for displaying and parsing primitive values.\n---\n",
          "doc-url": "",
          "attributes": [
            { "name": "key", "value": { "type": "string" } },
            { "name": "label", "value": { "type": "string" } },
            {
              "name": "delimiter",
              "value": { "type": "string", "default": "': '" }
            },
            { "name": "value", "value": { "type": "string" } },
            { "name": "value-path", "value": { "type": "string" } },
            { "name": "link", "value": { "type": "string" } },
            { "name": "context", "value": { "type": "string" } },
            { "name": "type", "value": { "type": "PrimitiveType" } },
            {
              "name": "showProvided",
              "value": { "type": "boolean", "default": "false" }
            },
            { "name": "mode", "value": { "type": "DisplayMode" } },
            {
              "name": "showerror",
              "value": { "type": "boolean", "default": "false" }
            },
            { "name": "errormessage", "value": { "type": "string" } },
            { "name": "variant", "value": { "type": "string" } },
            {
              "name": "verbose",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "summary",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "summaryonly",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "translate",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "trialuse",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "required",
              "value": { "type": "boolean", "default": "false" }
            }
          ],
          "events": [],
          "js": {
            "properties": [
              { "name": "displayConfig", "type": "DisplayConfig" },
              { "name": "contextData", "type": "FhirDataContext" },
              { "name": "key", "type": "string" },
              { "name": "label", "type": "string" },
              { "name": "delimiter", "type": "string" },
              { "name": "value", "type": "string" },
              { "name": "valuePath", "type": "string" },
              { "name": "link", "type": "string" },
              { "name": "context", "type": "string" },
              { "name": "type", "type": "PrimitiveType" },
              { "name": "showProvided", "type": "boolean" },
              { "name": "mode", "type": "DisplayMode" },
              { "name": "showerror", "type": "boolean" },
              { "name": "errormessage", "type": "string" },
              { "name": "variant", "type": "string" },
              { "name": "verbose", "type": "boolean" },
              { "name": "summary", "type": "boolean" },
              { "name": "summaryonly", "type": "boolean" },
              { "name": "translate", "type": "boolean" },
              { "name": "trialuse", "type": "boolean" },
              { "name": "required", "type": "boolean" }
            ],
            "events": []
          }
        },
        {
          "name": "fhir-empty-list",
          "description": "\n---\n",
          "doc-url": "",
          "attributes": [],
          "events": [],
          "js": { "properties": [], "events": [] }
        },
        {
          "name": "fhir-debug",
          "description": "\n---\n",
          "doc-url": "",
          "attributes": [
            { "name": "data", "value": { "type": "object", "default": "{}" } }
          ],
          "events": [],
          "js": {
            "properties": [{ "name": "data", "type": "object" }],
            "events": []
          }
        },
        {
          "name": "fhir-address",
          "description": "\n---\n\n\n### **Methods:**\n - **renderDisplay(config: _DisplayConfig_, data: _Decorated<AddressData>_, vldtns: _Validations_): _TemplateResult[]_** - convenience method implemented by fhir model elements and resources. Internal and abstract classes should\ncontribute templateGenerators instead.\n- **renderStructure(config: _DisplayConfig_, data: _Decorated<AddressData>_, vldtns: _Validations_): _TemplateResult[]_** - Convenience method implemented by fhir model elements and resources. Internal and abstract classes should\ncontribute templateGenerators instead.\n- **validate(data: _AddressData_, validations: _Validations_, fetched: _boolean_): _void_** - validate data to find complex errors not covered by primitive types. Errors can be accessed through `this.errors`.\nit is recommended to call\n`super.validate(T)` as well.\n- **decorate(data: _Decorated<D>_, validations: _Validations_, fetched: _boolean_): __** - Override to extend the given data with some useful context\n- **isPrepared(providedData: _T_, decoratedData: _(T & Decorated) | null_): _void_** - This method is used to indicate that the data is ready.\n- **willRender(config: _DisplayConfig_, data: _Decorated<T> | null_, changes: _PropertyValues_): _void_** - Determines if the component will render based on the given parameters.\n- **hasRendered(config: _DisplayConfig_, data: _Decorated<D> | null_, haveChanged: _PropertyValues_): _void_** - Called after the component has rendered.\n",
          "doc-url": "",
          "attributes": [
            { "name": "label", "value": { "type": "string", "default": "''" } },
            { "name": "mode", "value": { "type": "DisplayMode" } },
            {
              "name": "open",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "forceclose",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "verbose",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "showerror",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "summary",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "summaryonly",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "headless",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "key",
              "description": "The key the element is known as in its parent data strucuture",
              "value": { "type": "string", "default": "''" }
            },
            {
              "name": "data",
              "description": "Element data",
              "value": { "type": "T", "default": "NoDataObject" }
            },
            { "name": "data-path", "value": { "type": "string" } },
            {
              "name": "errors",
              "description": "An array of objects representing validation errors.",
              "value": { "type": "ValidationErrors", "default": "{}" }
            }
          ],
          "events": [],
          "js": {
            "properties": [
              { "name": "label", "type": "string" },
              { "name": "mode", "type": "DisplayMode" },
              { "name": "open", "type": "boolean" },
              { "name": "forceclose", "type": "boolean" },
              { "name": "verbose", "type": "boolean" },
              { "name": "showerror", "type": "boolean" },
              { "name": "summary", "type": "boolean" },
              { "name": "summaryonly", "type": "boolean" },
              { "name": "headless", "type": "boolean" },
              {
                "name": "key",
                "description": "The key the element is known as in its parent data strucuture",
                "type": "string"
              },
              { "name": "data", "description": "Element data", "type": "T" },
              { "name": "dataPath", "type": "string" },
              {
                "name": "extendedData",
                "description": "The extendedData variable is used to store additional data of type T and an empty object type {}.\nIt can also hold a null value.",
                "type": "T & {} | null"
              },
              {
                "name": "errors",
                "description": "An array of objects representing validation errors.",
                "type": "ValidationErrors"
              },
              { "name": "dataContext", "type": "FhirDataContext" }
            ],
            "events": []
          }
        },
        {
          "name": "fhir-annotation",
          "description": "\n---\n\n\n### **Methods:**\n - **validate(data: _AnnotationData_, validations: _Validations_): _void_** - validate data to find complex errors not covered by primitive types. Errors can be accessed through `this.errors`.\nit is recommended to call\n`super.validate(T)` as well.\n- **renderDisplay(config: _DisplayConfig_, data: _Decorated<AnnotationData>_, validations: _Validations_): _TemplateResult[]_** - convenience method implemented by fhir model elements and resources. Internal and abstract classes should\ncontribute templateGenerators instead.\n- **renderStructure(config: _DisplayConfig_, data: _Decorated<AnnotationData>_, validations: _Validations_): _TemplateResult[]_** - Convenience method implemented by fhir model elements and resources. Internal and abstract classes should\ncontribute templateGenerators instead.\n- **decorate(data: _Decorated<D>_, validations: _Validations_, fetched: _boolean_): __** - Override to extend the given data with some useful context\n- **isPrepared(providedData: _T_, decoratedData: _(T & Decorated) | null_): _void_** - This method is used to indicate that the data is ready.\n- **willRender(config: _DisplayConfig_, data: _Decorated<T> | null_, changes: _PropertyValues_): _void_** - Determines if the component will render based on the given parameters.\n- **hasRendered(config: _DisplayConfig_, data: _Decorated<D> | null_, haveChanged: _PropertyValues_): _void_** - Called after the component has rendered.\n",
          "doc-url": "",
          "attributes": [
            { "name": "label", "value": { "type": "string", "default": "''" } },
            { "name": "mode", "value": { "type": "DisplayMode" } },
            {
              "name": "open",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "forceclose",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "verbose",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "showerror",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "summary",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "summaryonly",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "headless",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "key",
              "description": "The key the element is known as in its parent data strucuture",
              "value": { "type": "string", "default": "''" }
            },
            {
              "name": "data",
              "description": "Element data",
              "value": { "type": "T", "default": "NoDataObject" }
            },
            { "name": "data-path", "value": { "type": "string" } },
            {
              "name": "errors",
              "description": "An array of objects representing validation errors.",
              "value": { "type": "ValidationErrors", "default": "{}" }
            }
          ],
          "events": [],
          "js": {
            "properties": [
              { "name": "label", "type": "string" },
              { "name": "mode", "type": "DisplayMode" },
              { "name": "open", "type": "boolean" },
              { "name": "forceclose", "type": "boolean" },
              { "name": "verbose", "type": "boolean" },
              { "name": "showerror", "type": "boolean" },
              { "name": "summary", "type": "boolean" },
              { "name": "summaryonly", "type": "boolean" },
              { "name": "headless", "type": "boolean" },
              {
                "name": "key",
                "description": "The key the element is known as in its parent data strucuture",
                "type": "string"
              },
              { "name": "data", "description": "Element data", "type": "T" },
              { "name": "dataPath", "type": "string" },
              {
                "name": "extendedData",
                "description": "The extendedData variable is used to store additional data of type T and an empty object type {}.\nIt can also hold a null value.",
                "type": "T & {} | null"
              },
              {
                "name": "errors",
                "description": "An array of objects representing validation errors.",
                "type": "ValidationErrors"
              },
              { "name": "dataContext", "type": "FhirDataContext" }
            ],
            "events": []
          }
        },
        {
          "name": "fhir-attachment",
          "description": "\n---\n\n\n### **Methods:**\n - **renderDisplay(config: _DisplayConfig_, data: _Decorated<AttachmentData>_): _TemplateResult[]_** - convenience method implemented by fhir model elements and resources. Internal and abstract classes should\ncontribute templateGenerators instead.\n- **renderStructure(config: _DisplayConfig_, data: _Decorated<AttachmentData>_): _TemplateResult[]_** - Convenience method implemented by fhir model elements and resources. Internal and abstract classes should\ncontribute templateGenerators instead.\n- **validate(data: _D_, validations: _Validations_, fetched: _boolean_): __** - validate data to find complex errors not covered by primitive types. Errors can be accessed through `this.errors`.\nit is recommended to call\n`super.validate(T)` as well.\n- **decorate(data: _Decorated<D>_, validations: _Validations_, fetched: _boolean_): __** - Override to extend the given data with some useful context\n- **isPrepared(providedData: _T_, decoratedData: _(T & Decorated) | null_): _void_** - This method is used to indicate that the data is ready.\n- **willRender(config: _DisplayConfig_, data: _Decorated<T> | null_, changes: _PropertyValues_): _void_** - Determines if the component will render based on the given parameters.\n- **hasRendered(config: _DisplayConfig_, data: _Decorated<D> | null_, haveChanged: _PropertyValues_): _void_** - Called after the component has rendered.\n",
          "doc-url": "",
          "attributes": [
            { "name": "label", "value": { "type": "string", "default": "''" } },
            { "name": "mode", "value": { "type": "DisplayMode" } },
            {
              "name": "open",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "forceclose",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "verbose",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "showerror",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "summary",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "summaryonly",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "headless",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "key",
              "description": "The key the element is known as in its parent data strucuture",
              "value": { "type": "string", "default": "''" }
            },
            {
              "name": "data",
              "description": "Element data",
              "value": { "type": "T", "default": "NoDataObject" }
            },
            { "name": "data-path", "value": { "type": "string" } },
            {
              "name": "errors",
              "description": "An array of objects representing validation errors.",
              "value": { "type": "ValidationErrors", "default": "{}" }
            }
          ],
          "events": [],
          "js": {
            "properties": [
              { "name": "label", "type": "string" },
              { "name": "mode", "type": "DisplayMode" },
              { "name": "open", "type": "boolean" },
              { "name": "forceclose", "type": "boolean" },
              { "name": "verbose", "type": "boolean" },
              { "name": "showerror", "type": "boolean" },
              { "name": "summary", "type": "boolean" },
              { "name": "summaryonly", "type": "boolean" },
              { "name": "headless", "type": "boolean" },
              {
                "name": "key",
                "description": "The key the element is known as in its parent data strucuture",
                "type": "string"
              },
              { "name": "data", "description": "Element data", "type": "T" },
              { "name": "dataPath", "type": "string" },
              {
                "name": "extendedData",
                "description": "The extendedData variable is used to store additional data of type T and an empty object type {}.\nIt can also hold a null value.",
                "type": "T & {} | null"
              },
              {
                "name": "errors",
                "description": "An array of objects representing validation errors.",
                "type": "ValidationErrors"
              },
              { "name": "dataContext", "type": "FhirDataContext" }
            ],
            "events": []
          }
        },
        {
          "name": "fhir-codeable-concept",
          "description": "\n---\n\n\n### **Methods:**\n - **renderDisplay(config: _DisplayConfig_, data: _Decorated<CodeableConceptData>_): _TemplateResult[]_** - convenience method implemented by fhir model elements and resources. Internal and abstract classes should\ncontribute templateGenerators instead.\n- **renderStructure(config: _DisplayConfig_, data: _Decorated<CodeableConceptData>_): _TemplateResult[]_** - Convenience method implemented by fhir model elements and resources. Internal and abstract classes should\ncontribute templateGenerators instead.\n- **validate(data: _D_, validations: _Validations_, fetched: _boolean_): __** - validate data to find complex errors not covered by primitive types. Errors can be accessed through `this.errors`.\nit is recommended to call\n`super.validate(T)` as well.\n- **decorate(data: _Decorated<D>_, validations: _Validations_, fetched: _boolean_): __** - Override to extend the given data with some useful context\n- **isPrepared(providedData: _T_, decoratedData: _(T & Decorated) | null_): _void_** - This method is used to indicate that the data is ready.\n- **willRender(config: _DisplayConfig_, data: _Decorated<T> | null_, changes: _PropertyValues_): _void_** - Determines if the component will render based on the given parameters.\n- **hasRendered(config: _DisplayConfig_, data: _Decorated<D> | null_, haveChanged: _PropertyValues_): _void_** - Called after the component has rendered.\n",
          "doc-url": "",
          "attributes": [
            { "name": "label", "value": { "type": "string", "default": "''" } },
            { "name": "mode", "value": { "type": "DisplayMode" } },
            {
              "name": "open",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "forceclose",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "verbose",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "showerror",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "summary",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "summaryonly",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "headless",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "key",
              "description": "The key the element is known as in its parent data strucuture",
              "value": { "type": "string", "default": "''" }
            },
            {
              "name": "data",
              "description": "Element data",
              "value": { "type": "T", "default": "NoDataObject" }
            },
            { "name": "data-path", "value": { "type": "string" } },
            {
              "name": "errors",
              "description": "An array of objects representing validation errors.",
              "value": { "type": "ValidationErrors", "default": "{}" }
            }
          ],
          "events": [],
          "js": {
            "properties": [
              { "name": "label", "type": "string" },
              { "name": "mode", "type": "DisplayMode" },
              { "name": "open", "type": "boolean" },
              { "name": "forceclose", "type": "boolean" },
              { "name": "verbose", "type": "boolean" },
              { "name": "showerror", "type": "boolean" },
              { "name": "summary", "type": "boolean" },
              { "name": "summaryonly", "type": "boolean" },
              { "name": "headless", "type": "boolean" },
              {
                "name": "key",
                "description": "The key the element is known as in its parent data strucuture",
                "type": "string"
              },
              { "name": "data", "description": "Element data", "type": "T" },
              { "name": "dataPath", "type": "string" },
              {
                "name": "extendedData",
                "description": "The extendedData variable is used to store additional data of type T and an empty object type {}.\nIt can also hold a null value.",
                "type": "T & {} | null"
              },
              {
                "name": "errors",
                "description": "An array of objects representing validation errors.",
                "type": "ValidationErrors"
              },
              { "name": "dataContext", "type": "FhirDataContext" }
            ],
            "events": []
          }
        },
        {
          "name": "fhir-codeable-reference",
          "description": "\n---\n\n\n### **Methods:**\n - **renderDisplay(config: _DisplayConfig_, data: _CodeableReferenceData_): _TemplateResult[]_** - convenience method implemented by fhir model elements and resources. Internal and abstract classes should\ncontribute templateGenerators instead.\n- **renderStructure(config: _DisplayConfig_, data: _CodeableReferenceData_): _TemplateResult[]_** - Convenience method implemented by fhir model elements and resources. Internal and abstract classes should\ncontribute templateGenerators instead.\n- **validate(data: _D_, validations: _Validations_, fetched: _boolean_): __** - validate data to find complex errors not covered by primitive types. Errors can be accessed through `this.errors`.\nit is recommended to call\n`super.validate(T)` as well.\n- **decorate(data: _Decorated<D>_, validations: _Validations_, fetched: _boolean_): __** - Override to extend the given data with some useful context\n- **isPrepared(providedData: _T_, decoratedData: _(T & Decorated) | null_): _void_** - This method is used to indicate that the data is ready.\n- **willRender(config: _DisplayConfig_, data: _Decorated<T> | null_, changes: _PropertyValues_): _void_** - Determines if the component will render based on the given parameters.\n- **hasRendered(config: _DisplayConfig_, data: _Decorated<D> | null_, haveChanged: _PropertyValues_): _void_** - Called after the component has rendered.\n",
          "doc-url": "",
          "attributes": [
            { "name": "label", "value": { "type": "string", "default": "''" } },
            { "name": "mode", "value": { "type": "DisplayMode" } },
            {
              "name": "open",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "forceclose",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "verbose",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "showerror",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "summary",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "summaryonly",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "headless",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "key",
              "description": "The key the element is known as in its parent data strucuture",
              "value": { "type": "string", "default": "''" }
            },
            {
              "name": "data",
              "description": "Element data",
              "value": { "type": "T", "default": "NoDataObject" }
            },
            { "name": "data-path", "value": { "type": "string" } },
            {
              "name": "errors",
              "description": "An array of objects representing validation errors.",
              "value": { "type": "ValidationErrors", "default": "{}" }
            }
          ],
          "events": [],
          "js": {
            "properties": [
              { "name": "label", "type": "string" },
              { "name": "mode", "type": "DisplayMode" },
              { "name": "open", "type": "boolean" },
              { "name": "forceclose", "type": "boolean" },
              { "name": "verbose", "type": "boolean" },
              { "name": "showerror", "type": "boolean" },
              { "name": "summary", "type": "boolean" },
              { "name": "summaryonly", "type": "boolean" },
              { "name": "headless", "type": "boolean" },
              {
                "name": "key",
                "description": "The key the element is known as in its parent data strucuture",
                "type": "string"
              },
              { "name": "data", "description": "Element data", "type": "T" },
              { "name": "dataPath", "type": "string" },
              {
                "name": "extendedData",
                "description": "The extendedData variable is used to store additional data of type T and an empty object type {}.\nIt can also hold a null value.",
                "type": "T & {} | null"
              },
              {
                "name": "errors",
                "description": "An array of objects representing validation errors.",
                "type": "ValidationErrors"
              },
              { "name": "dataContext", "type": "FhirDataContext" }
            ],
            "events": []
          }
        },
        {
          "name": "fhir-coding",
          "description": "\n---\n\n\n### **Methods:**\n - **renderDisplay(config: _DisplayConfig_, data: _CodingData_): _TemplateResult[]_** - convenience method implemented by fhir model elements and resources. Internal and abstract classes should\ncontribute templateGenerators instead.\n- **renderStructure(config: _DisplayConfig_, data: _CodingData_, validations: _Validations_): _TemplateResult[]_** - Convenience method implemented by fhir model elements and resources. Internal and abstract classes should\ncontribute templateGenerators instead.\n- **validate(data: _D_, validations: _Validations_, fetched: _boolean_): __** - validate data to find complex errors not covered by primitive types. Errors can be accessed through `this.errors`.\nit is recommended to call\n`super.validate(T)` as well.\n- **decorate(data: _Decorated<D>_, validations: _Validations_, fetched: _boolean_): __** - Override to extend the given data with some useful context\n- **isPrepared(providedData: _T_, decoratedData: _(T & Decorated) | null_): _void_** - This method is used to indicate that the data is ready.\n- **willRender(config: _DisplayConfig_, data: _Decorated<T> | null_, changes: _PropertyValues_): _void_** - Determines if the component will render based on the given parameters.\n- **hasRendered(config: _DisplayConfig_, data: _Decorated<D> | null_, haveChanged: _PropertyValues_): _void_** - Called after the component has rendered.\n",
          "doc-url": "",
          "attributes": [
            { "name": "label", "value": { "type": "string", "default": "''" } },
            { "name": "mode", "value": { "type": "DisplayMode" } },
            {
              "name": "open",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "forceclose",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "verbose",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "showerror",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "summary",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "summaryonly",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "headless",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "key",
              "description": "The key the element is known as in its parent data strucuture",
              "value": { "type": "string", "default": "''" }
            },
            {
              "name": "data",
              "description": "Element data",
              "value": { "type": "T", "default": "NoDataObject" }
            },
            { "name": "data-path", "value": { "type": "string" } },
            {
              "name": "errors",
              "description": "An array of objects representing validation errors.",
              "value": { "type": "ValidationErrors", "default": "{}" }
            }
          ],
          "events": [],
          "js": {
            "properties": [
              { "name": "label", "type": "string" },
              { "name": "mode", "type": "DisplayMode" },
              { "name": "open", "type": "boolean" },
              { "name": "forceclose", "type": "boolean" },
              { "name": "verbose", "type": "boolean" },
              { "name": "showerror", "type": "boolean" },
              { "name": "summary", "type": "boolean" },
              { "name": "summaryonly", "type": "boolean" },
              { "name": "headless", "type": "boolean" },
              {
                "name": "key",
                "description": "The key the element is known as in its parent data strucuture",
                "type": "string"
              },
              { "name": "data", "description": "Element data", "type": "T" },
              { "name": "dataPath", "type": "string" },
              {
                "name": "extendedData",
                "description": "The extendedData variable is used to store additional data of type T and an empty object type {}.\nIt can also hold a null value.",
                "type": "T & {} | null"
              },
              {
                "name": "errors",
                "description": "An array of objects representing validation errors.",
                "type": "ValidationErrors"
              },
              { "name": "dataContext", "type": "FhirDataContext" }
            ],
            "events": []
          }
        },
        {
          "name": "fhir-contact-point",
          "description": "\n---\n\n\n### **Methods:**\n - **renderDisplay(config: _DisplayConfig_, data: _Decorated<ContactPointData>_): _TemplateResult[]_** - convenience method implemented by fhir model elements and resources. Internal and abstract classes should\ncontribute templateGenerators instead.\n- **renderStructure(config: _DisplayConfig_, data: _Decorated<ContactPointData>_): _TemplateResult[]_** - Convenience method implemented by fhir model elements and resources. Internal and abstract classes should\ncontribute templateGenerators instead.\n- **validate(data: _D_, validations: _Validations_, fetched: _boolean_): __** - validate data to find complex errors not covered by primitive types. Errors can be accessed through `this.errors`.\nit is recommended to call\n`super.validate(T)` as well.\n- **decorate(data: _Decorated<D>_, validations: _Validations_, fetched: _boolean_): __** - Override to extend the given data with some useful context\n- **isPrepared(providedData: _T_, decoratedData: _(T & Decorated) | null_): _void_** - This method is used to indicate that the data is ready.\n- **willRender(config: _DisplayConfig_, data: _Decorated<T> | null_, changes: _PropertyValues_): _void_** - Determines if the component will render based on the given parameters.\n- **hasRendered(config: _DisplayConfig_, data: _Decorated<D> | null_, haveChanged: _PropertyValues_): _void_** - Called after the component has rendered.\n",
          "doc-url": "",
          "attributes": [
            { "name": "label", "value": { "type": "string", "default": "''" } },
            { "name": "mode", "value": { "type": "DisplayMode" } },
            {
              "name": "open",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "forceclose",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "verbose",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "showerror",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "summary",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "summaryonly",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "headless",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "key",
              "description": "The key the element is known as in its parent data strucuture",
              "value": { "type": "string", "default": "''" }
            },
            {
              "name": "data",
              "description": "Element data",
              "value": { "type": "T", "default": "NoDataObject" }
            },
            { "name": "data-path", "value": { "type": "string" } },
            {
              "name": "errors",
              "description": "An array of objects representing validation errors.",
              "value": { "type": "ValidationErrors", "default": "{}" }
            }
          ],
          "events": [],
          "js": {
            "properties": [
              { "name": "label", "type": "string" },
              { "name": "mode", "type": "DisplayMode" },
              { "name": "open", "type": "boolean" },
              { "name": "forceclose", "type": "boolean" },
              { "name": "verbose", "type": "boolean" },
              { "name": "showerror", "type": "boolean" },
              { "name": "summary", "type": "boolean" },
              { "name": "summaryonly", "type": "boolean" },
              { "name": "headless", "type": "boolean" },
              {
                "name": "key",
                "description": "The key the element is known as in its parent data strucuture",
                "type": "string"
              },
              { "name": "data", "description": "Element data", "type": "T" },
              { "name": "dataPath", "type": "string" },
              {
                "name": "extendedData",
                "description": "The extendedData variable is used to store additional data of type T and an empty object type {}.\nIt can also hold a null value.",
                "type": "T & {} | null"
              },
              {
                "name": "errors",
                "description": "An array of objects representing validation errors.",
                "type": "ValidationErrors"
              },
              { "name": "dataContext", "type": "FhirDataContext" }
            ],
            "events": []
          }
        },
        {
          "name": "fhir-human-name",
          "description": "\n---\n\n\n### **Methods:**\n - **renderDisplay(config: _DisplayConfig_, data: _Decorated<HumanNameData>_): _TemplateResult[]_** - convenience method implemented by fhir model elements and resources. Internal and abstract classes should\ncontribute templateGenerators instead.\n- **renderStructure(config: _DisplayConfig_, data: _Decorated<HumanNameData>_): _TemplateResult[]_** - Convenience method implemented by fhir model elements and resources. Internal and abstract classes should\ncontribute templateGenerators instead.\n- **validate(data: _D_, validations: _Validations_, fetched: _boolean_): __** - validate data to find complex errors not covered by primitive types. Errors can be accessed through `this.errors`.\nit is recommended to call\n`super.validate(T)` as well.\n- **decorate(data: _Decorated<D>_, validations: _Validations_, fetched: _boolean_): __** - Override to extend the given data with some useful context\n- **isPrepared(providedData: _T_, decoratedData: _(T & Decorated) | null_): _void_** - This method is used to indicate that the data is ready.\n- **willRender(config: _DisplayConfig_, data: _Decorated<T> | null_, changes: _PropertyValues_): _void_** - Determines if the component will render based on the given parameters.\n- **hasRendered(config: _DisplayConfig_, data: _Decorated<D> | null_, haveChanged: _PropertyValues_): _void_** - Called after the component has rendered.\n",
          "doc-url": "",
          "attributes": [
            { "name": "label", "value": { "type": "string", "default": "''" } },
            { "name": "mode", "value": { "type": "DisplayMode" } },
            {
              "name": "open",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "forceclose",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "verbose",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "showerror",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "summary",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "summaryonly",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "headless",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "key",
              "description": "The key the element is known as in its parent data strucuture",
              "value": { "type": "string", "default": "''" }
            },
            {
              "name": "data",
              "description": "Element data",
              "value": { "type": "T", "default": "NoDataObject" }
            },
            { "name": "data-path", "value": { "type": "string" } },
            {
              "name": "errors",
              "description": "An array of objects representing validation errors.",
              "value": { "type": "ValidationErrors", "default": "{}" }
            }
          ],
          "events": [],
          "js": {
            "properties": [
              { "name": "label", "type": "string" },
              { "name": "mode", "type": "DisplayMode" },
              { "name": "open", "type": "boolean" },
              { "name": "forceclose", "type": "boolean" },
              { "name": "verbose", "type": "boolean" },
              { "name": "showerror", "type": "boolean" },
              { "name": "summary", "type": "boolean" },
              { "name": "summaryonly", "type": "boolean" },
              { "name": "headless", "type": "boolean" },
              {
                "name": "key",
                "description": "The key the element is known as in its parent data strucuture",
                "type": "string"
              },
              { "name": "data", "description": "Element data", "type": "T" },
              { "name": "dataPath", "type": "string" },
              {
                "name": "extendedData",
                "description": "The extendedData variable is used to store additional data of type T and an empty object type {}.\nIt can also hold a null value.",
                "type": "T & {} | null"
              },
              {
                "name": "errors",
                "description": "An array of objects representing validation errors.",
                "type": "ValidationErrors"
              },
              { "name": "dataContext", "type": "FhirDataContext" }
            ],
            "events": []
          }
        },
        {
          "name": "fhir-identifier",
          "description": "\n---\n\n\n### **Methods:**\n - **renderDisplay(config: _DisplayConfig_, data: _Decorated<IdentifierData>_, validations: _Validations_): _TemplateResult[]_** - convenience method implemented by fhir model elements and resources. Internal and abstract classes should\ncontribute templateGenerators instead.\n- **renderStructure(config: _DisplayConfig_, data: _Decorated<IdentifierData>_, validations: _Validations_): _TemplateResult[]_** - Convenience method implemented by fhir model elements and resources. Internal and abstract classes should\ncontribute templateGenerators instead.\n- **validate(data: _IdentifierData_, validations: _Validations_, fetched: _boolean_): _void_** - validate data to find complex errors not covered by primitive types. Errors can be accessed through `this.errors`.\nit is recommended to call\n`super.validate(T)` as well.\n- **decorate(data: _Decorated<D>_, validations: _Validations_, fetched: _boolean_): __** - Override to extend the given data with some useful context\n- **isPrepared(providedData: _T_, decoratedData: _(T & Decorated) | null_): _void_** - This method is used to indicate that the data is ready.\n- **willRender(config: _DisplayConfig_, data: _Decorated<T> | null_, changes: _PropertyValues_): _void_** - Determines if the component will render based on the given parameters.\n- **hasRendered(config: _DisplayConfig_, data: _Decorated<D> | null_, haveChanged: _PropertyValues_): _void_** - Called after the component has rendered.\n",
          "doc-url": "",
          "attributes": [
            { "name": "label", "value": { "type": "string", "default": "''" } },
            { "name": "mode", "value": { "type": "DisplayMode" } },
            {
              "name": "open",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "forceclose",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "verbose",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "showerror",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "summary",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "summaryonly",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "headless",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "key",
              "description": "The key the element is known as in its parent data strucuture",
              "value": { "type": "string", "default": "''" }
            },
            {
              "name": "data",
              "description": "Element data",
              "value": { "type": "T", "default": "NoDataObject" }
            },
            { "name": "data-path", "value": { "type": "string" } },
            {
              "name": "errors",
              "description": "An array of objects representing validation errors.",
              "value": { "type": "ValidationErrors", "default": "{}" }
            }
          ],
          "events": [],
          "js": {
            "properties": [
              { "name": "label", "type": "string" },
              { "name": "mode", "type": "DisplayMode" },
              { "name": "open", "type": "boolean" },
              { "name": "forceclose", "type": "boolean" },
              { "name": "verbose", "type": "boolean" },
              { "name": "showerror", "type": "boolean" },
              { "name": "summary", "type": "boolean" },
              { "name": "summaryonly", "type": "boolean" },
              { "name": "headless", "type": "boolean" },
              {
                "name": "key",
                "description": "The key the element is known as in its parent data strucuture",
                "type": "string"
              },
              { "name": "data", "description": "Element data", "type": "T" },
              { "name": "dataPath", "type": "string" },
              {
                "name": "extendedData",
                "description": "The extendedData variable is used to store additional data of type T and an empty object type {}.\nIt can also hold a null value.",
                "type": "T & {} | null"
              },
              {
                "name": "errors",
                "description": "An array of objects representing validation errors.",
                "type": "ValidationErrors"
              },
              { "name": "dataContext", "type": "FhirDataContext" }
            ],
            "events": []
          }
        },
        {
          "name": "fhir-period",
          "description": "\n---\n\n\n### **Methods:**\n - **renderDisplay(config: _DisplayConfig_, data: _Decorated<PeriodData>_): _TemplateResult[]_** - convenience method implemented by fhir model elements and resources. Internal and abstract classes should\ncontribute templateGenerators instead.\n- **renderStructure(config: _DisplayConfig_, data: _Decorated<PeriodData>_): _TemplateResult[]_** - Convenience method implemented by fhir model elements and resources. Internal and abstract classes should\ncontribute templateGenerators instead.\n- **validate(data: _D_, validations: _Validations_, fetched: _boolean_): __** - validate data to find complex errors not covered by primitive types. Errors can be accessed through `this.errors`.\nit is recommended to call\n`super.validate(T)` as well.\n- **decorate(data: _Decorated<D>_, validations: _Validations_, fetched: _boolean_): __** - Override to extend the given data with some useful context\n- **isPrepared(providedData: _T_, decoratedData: _(T & Decorated) | null_): _void_** - This method is used to indicate that the data is ready.\n- **willRender(config: _DisplayConfig_, data: _Decorated<T> | null_, changes: _PropertyValues_): _void_** - Determines if the component will render based on the given parameters.\n- **hasRendered(config: _DisplayConfig_, data: _Decorated<D> | null_, haveChanged: _PropertyValues_): _void_** - Called after the component has rendered.\n",
          "doc-url": "",
          "attributes": [
            { "name": "label", "value": { "type": "string", "default": "''" } },
            { "name": "mode", "value": { "type": "DisplayMode" } },
            {
              "name": "open",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "forceclose",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "verbose",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "showerror",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "summary",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "summaryonly",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "headless",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "key",
              "description": "The key the element is known as in its parent data strucuture",
              "value": { "type": "string", "default": "''" }
            },
            {
              "name": "data",
              "description": "Element data",
              "value": { "type": "T", "default": "NoDataObject" }
            },
            { "name": "data-path", "value": { "type": "string" } },
            {
              "name": "errors",
              "description": "An array of objects representing validation errors.",
              "value": { "type": "ValidationErrors", "default": "{}" }
            }
          ],
          "events": [],
          "js": {
            "properties": [
              { "name": "label", "type": "string" },
              { "name": "mode", "type": "DisplayMode" },
              { "name": "open", "type": "boolean" },
              { "name": "forceclose", "type": "boolean" },
              { "name": "verbose", "type": "boolean" },
              { "name": "showerror", "type": "boolean" },
              { "name": "summary", "type": "boolean" },
              { "name": "summaryonly", "type": "boolean" },
              { "name": "headless", "type": "boolean" },
              {
                "name": "key",
                "description": "The key the element is known as in its parent data strucuture",
                "type": "string"
              },
              { "name": "data", "description": "Element data", "type": "T" },
              { "name": "dataPath", "type": "string" },
              {
                "name": "extendedData",
                "description": "The extendedData variable is used to store additional data of type T and an empty object type {}.\nIt can also hold a null value.",
                "type": "T & {} | null"
              },
              {
                "name": "errors",
                "description": "An array of objects representing validation errors.",
                "type": "ValidationErrors"
              },
              { "name": "dataContext", "type": "FhirDataContext" }
            ],
            "events": []
          }
        },
        {
          "name": "fhir-quantity",
          "description": "\n---\n\n\n### **Methods:**\n - **renderDisplay(config: _DisplayConfig_, data: _QuantityData | SimpleQuantityData_): _TemplateResult[]_** - convenience method implemented by fhir model elements and resources. Internal and abstract classes should\ncontribute templateGenerators instead.\n- **renderStructure(config: _DisplayConfig_, data: _QuantityData | SimpleQuantityData_): _TemplateResult[]_** - Convenience method implemented by fhir model elements and resources. Internal and abstract classes should\ncontribute templateGenerators instead.\n- **validate(data: _QuantityData | SimpleQuantityData_, validations: _Validations_, fetched: _boolean_): __** - validate data to find complex errors not covered by primitive types. Errors can be accessed through `this.errors`.\nit is recommended to call\n`super.validate(T)` as well.\n- **decorate(data: _QuantityData_): _Decorated<QuantityData> | Decorated<SimpleQuantityData>_** - Override to extend the given data with some useful context\n- **isPrepared(providedData: _T_, decoratedData: _(T & Decorated) | null_): _void_** - This method is used to indicate that the data is ready.\n- **willRender(config: _DisplayConfig_, data: _Decorated<T> | null_, changes: _PropertyValues_): _void_** - Determines if the component will render based on the given parameters.\n- **hasRendered(config: _DisplayConfig_, data: _Decorated<D> | null_, haveChanged: _PropertyValues_): _void_** - Called after the component has rendered.\n",
          "doc-url": "",
          "attributes": [
            { "name": "label", "value": { "type": "string", "default": "''" } },
            { "name": "mode", "value": { "type": "DisplayMode" } },
            {
              "name": "open",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "forceclose",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "verbose",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "showerror",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "summary",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "summaryonly",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "headless",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "key",
              "description": "The key the element is known as in its parent data strucuture",
              "value": { "type": "string", "default": "''" }
            },
            {
              "name": "data",
              "description": "Element data",
              "value": { "type": "T", "default": "NoDataObject" }
            },
            { "name": "data-path", "value": { "type": "string" } },
            {
              "name": "errors",
              "description": "An array of objects representing validation errors.",
              "value": { "type": "ValidationErrors", "default": "{}" }
            }
          ],
          "events": [],
          "js": {
            "properties": [
              { "name": "label", "type": "string" },
              { "name": "mode", "type": "DisplayMode" },
              { "name": "open", "type": "boolean" },
              { "name": "forceclose", "type": "boolean" },
              { "name": "verbose", "type": "boolean" },
              { "name": "showerror", "type": "boolean" },
              { "name": "summary", "type": "boolean" },
              { "name": "summaryonly", "type": "boolean" },
              { "name": "headless", "type": "boolean" },
              {
                "name": "key",
                "description": "The key the element is known as in its parent data strucuture",
                "type": "string"
              },
              { "name": "data", "description": "Element data", "type": "T" },
              { "name": "dataPath", "type": "string" },
              {
                "name": "extendedData",
                "description": "The extendedData variable is used to store additional data of type T and an empty object type {}.\nIt can also hold a null value.",
                "type": "T & {} | null"
              },
              {
                "name": "errors",
                "description": "An array of objects representing validation errors.",
                "type": "ValidationErrors"
              },
              { "name": "dataContext", "type": "FhirDataContext" }
            ],
            "events": []
          }
        },
        {
          "name": "fhir-ratio",
          "description": "\n---\n\n\n### **Methods:**\n - **renderDisplay(_: _DisplayConfig_, data: _RatioData_): _TemplateResult[]_** - convenience method implemented by fhir model elements and resources. Internal and abstract classes should\ncontribute templateGenerators instead.\n- **renderStructure(_: _DisplayConfig_, data: _RatioData_): _TemplateResult[]_** - Convenience method implemented by fhir model elements and resources. Internal and abstract classes should\ncontribute templateGenerators instead.\n- **validate(data: _D_, validations: _Validations_, fetched: _boolean_): __** - validate data to find complex errors not covered by primitive types. Errors can be accessed through `this.errors`.\nit is recommended to call\n`super.validate(T)` as well.\n- **decorate(data: _Decorated<D>_, validations: _Validations_, fetched: _boolean_): __** - Override to extend the given data with some useful context\n- **isPrepared(providedData: _T_, decoratedData: _(T & Decorated) | null_): _void_** - This method is used to indicate that the data is ready.\n- **willRender(config: _DisplayConfig_, data: _Decorated<T> | null_, changes: _PropertyValues_): _void_** - Determines if the component will render based on the given parameters.\n- **hasRendered(config: _DisplayConfig_, data: _Decorated<D> | null_, haveChanged: _PropertyValues_): _void_** - Called after the component has rendered.\n",
          "doc-url": "",
          "attributes": [
            { "name": "label", "value": { "type": "string", "default": "''" } },
            { "name": "mode", "value": { "type": "DisplayMode" } },
            {
              "name": "open",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "forceclose",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "verbose",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "showerror",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "summary",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "summaryonly",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "headless",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "key",
              "description": "The key the element is known as in its parent data strucuture",
              "value": { "type": "string", "default": "''" }
            },
            {
              "name": "data",
              "description": "Element data",
              "value": { "type": "T", "default": "NoDataObject" }
            },
            { "name": "data-path", "value": { "type": "string" } },
            {
              "name": "errors",
              "description": "An array of objects representing validation errors.",
              "value": { "type": "ValidationErrors", "default": "{}" }
            }
          ],
          "events": [],
          "js": {
            "properties": [
              { "name": "label", "type": "string" },
              { "name": "mode", "type": "DisplayMode" },
              { "name": "open", "type": "boolean" },
              { "name": "forceclose", "type": "boolean" },
              { "name": "verbose", "type": "boolean" },
              { "name": "showerror", "type": "boolean" },
              { "name": "summary", "type": "boolean" },
              { "name": "summaryonly", "type": "boolean" },
              { "name": "headless", "type": "boolean" },
              {
                "name": "key",
                "description": "The key the element is known as in its parent data strucuture",
                "type": "string"
              },
              { "name": "data", "description": "Element data", "type": "T" },
              { "name": "dataPath", "type": "string" },
              {
                "name": "extendedData",
                "description": "The extendedData variable is used to store additional data of type T and an empty object type {}.\nIt can also hold a null value.",
                "type": "T & {} | null"
              },
              {
                "name": "errors",
                "description": "An array of objects representing validation errors.",
                "type": "ValidationErrors"
              },
              { "name": "dataContext", "type": "FhirDataContext" }
            ],
            "events": []
          }
        },
        {
          "name": "fhir-signature",
          "description": "\n---\n\n\n### **Methods:**\n - **renderDisplay(config: _DisplayConfig_, data: _SignatureData_): _TemplateResult[]_** - convenience method implemented by fhir model elements and resources. Internal and abstract classes should\ncontribute templateGenerators instead.\n- **renderStructure(config: _DisplayConfig_, data: _SignatureData_): _TemplateResult[]_** - Convenience method implemented by fhir model elements and resources. Internal and abstract classes should\ncontribute templateGenerators instead.\n- **validate(data: _D_, validations: _Validations_, fetched: _boolean_): __** - validate data to find complex errors not covered by primitive types. Errors can be accessed through `this.errors`.\nit is recommended to call\n`super.validate(T)` as well.\n- **decorate(data: _Decorated<D>_, validations: _Validations_, fetched: _boolean_): __** - Override to extend the given data with some useful context\n- **isPrepared(providedData: _T_, decoratedData: _(T & Decorated) | null_): _void_** - This method is used to indicate that the data is ready.\n- **willRender(config: _DisplayConfig_, data: _Decorated<T> | null_, changes: _PropertyValues_): _void_** - Determines if the component will render based on the given parameters.\n- **hasRendered(config: _DisplayConfig_, data: _Decorated<D> | null_, haveChanged: _PropertyValues_): _void_** - Called after the component has rendered.\n",
          "doc-url": "",
          "attributes": [
            { "name": "label", "value": { "type": "string", "default": "''" } },
            { "name": "mode", "value": { "type": "DisplayMode" } },
            {
              "name": "open",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "forceclose",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "verbose",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "showerror",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "summary",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "summaryonly",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "headless",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "key",
              "description": "The key the element is known as in its parent data strucuture",
              "value": { "type": "string", "default": "''" }
            },
            {
              "name": "data",
              "description": "Element data",
              "value": { "type": "T", "default": "NoDataObject" }
            },
            { "name": "data-path", "value": { "type": "string" } },
            {
              "name": "errors",
              "description": "An array of objects representing validation errors.",
              "value": { "type": "ValidationErrors", "default": "{}" }
            }
          ],
          "events": [],
          "js": {
            "properties": [
              { "name": "label", "type": "string" },
              { "name": "mode", "type": "DisplayMode" },
              { "name": "open", "type": "boolean" },
              { "name": "forceclose", "type": "boolean" },
              { "name": "verbose", "type": "boolean" },
              { "name": "showerror", "type": "boolean" },
              { "name": "summary", "type": "boolean" },
              { "name": "summaryonly", "type": "boolean" },
              { "name": "headless", "type": "boolean" },
              {
                "name": "key",
                "description": "The key the element is known as in its parent data strucuture",
                "type": "string"
              },
              { "name": "data", "description": "Element data", "type": "T" },
              { "name": "dataPath", "type": "string" },
              {
                "name": "extendedData",
                "description": "The extendedData variable is used to store additional data of type T and an empty object type {}.\nIt can also hold a null value.",
                "type": "T & {} | null"
              },
              {
                "name": "errors",
                "description": "An array of objects representing validation errors.",
                "type": "ValidationErrors"
              },
              { "name": "dataContext", "type": "FhirDataContext" }
            ],
            "events": []
          }
        },
        {
          "name": "fhir-bundle",
          "description": "\n---\n\n\n### **Methods:**\n - **renderDisplay(config: _DisplayConfig_, data: _Decorated<BundleData>_): _TemplateResult[]_** - convenience method implemented by fhir model elements and resources. Internal and abstract classes should\ncontribute templateGenerators instead.\n- **renderStructure(config: _DisplayConfig_, data: _Decorated<BundleData>_): _TemplateResult[]_** - Convenience method implemented by fhir model elements and resources. Internal and abstract classes should\ncontribute templateGenerators instead.\n- **validate(data: _D_, validations: _Validations_, fetched: _boolean_): __** - validate data to find complex errors not covered by primitive types. Errors can be accessed through `this.errors`.\nit is recommended to call\n`super.validate(T)` as well.\n- **decorate(data: _Decorated<D>_, validations: _Validations_, fetched: _boolean_): __** - Override to extend the given data with some useful context\n- **isPrepared(providedData: _T_, decoratedData: _(T & Decorated) | null_): _void_** - This method is used to indicate that the data is ready.\n- **willRender(config: _DisplayConfig_, data: _Decorated<T> | null_, changes: _PropertyValues_): _void_** - Determines if the component will render based on the given parameters.\n- **hasRendered(config: _DisplayConfig_, data: _Decorated<D> | null_, haveChanged: _PropertyValues_): _void_** - Called after the component has rendered.\n",
          "doc-url": "",
          "attributes": [
            { "name": "label", "value": { "type": "string", "default": "''" } },
            { "name": "mode", "value": { "type": "DisplayMode" } },
            {
              "name": "open",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "forceclose",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "verbose",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "showerror",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "summary",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "summaryonly",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "headless",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "key",
              "description": "The key the element is known as in its parent data strucuture",
              "value": { "type": "string", "default": "''" }
            },
            {
              "name": "data",
              "description": "Element data",
              "value": { "type": "T", "default": "NoDataObject" }
            },
            { "name": "data-path", "value": { "type": "string" } },
            {
              "name": "errors",
              "description": "An array of objects representing validation errors.",
              "value": { "type": "ValidationErrors", "default": "{}" }
            }
          ],
          "events": [],
          "js": {
            "properties": [
              { "name": "label", "type": "string" },
              { "name": "mode", "type": "DisplayMode" },
              { "name": "open", "type": "boolean" },
              { "name": "forceclose", "type": "boolean" },
              { "name": "verbose", "type": "boolean" },
              { "name": "showerror", "type": "boolean" },
              { "name": "summary", "type": "boolean" },
              { "name": "summaryonly", "type": "boolean" },
              { "name": "headless", "type": "boolean" },
              {
                "name": "key",
                "description": "The key the element is known as in its parent data strucuture",
                "type": "string"
              },
              { "name": "data", "description": "Element data", "type": "T" },
              { "name": "dataPath", "type": "string" },
              {
                "name": "extendedData",
                "description": "The extendedData variable is used to store additional data of type T and an empty object type {}.\nIt can also hold a null value.",
                "type": "T & {} | null"
              },
              {
                "name": "errors",
                "description": "An array of objects representing validation errors.",
                "type": "ValidationErrors"
              },
              { "name": "dataContext", "type": "FhirDataContext" }
            ],
            "events": []
          }
        },
        {
          "name": "fhir-context",
          "description": "\n---\n",
          "doc-url": "",
          "attributes": [
            { "name": "text", "value": { "type": "string", "default": "''" } }
          ],
          "events": [],
          "js": {
            "properties": [{ "name": "text", "type": "string" }],
            "events": []
          }
        },
        {
          "name": "fhir-error",
          "description": "\n---\n",
          "doc-url": "",
          "attributes": [{ "name": "text", "value": { "type": "string" } }],
          "events": [],
          "js": {
            "properties": [{ "name": "text", "type": "string" }],
            "events": []
          }
        },
        {
          "name": "fhir-label",
          "description": "\n---\n",
          "doc-url": "",
          "attributes": [
            { "name": "text", "value": { "type": "string" } },
            { "name": "variant", "value": { "type": "string" } },
            {
              "name": "delimiter",
              "value": { "type": "string", "default": "':'" }
            },
            { "name": "for", "value": { "type": "string" } }
          ],
          "events": [],
          "js": {
            "properties": [
              { "name": "text", "type": "string" },
              { "name": "variant", "type": "string" },
              { "name": "delimiter", "type": "string" },
              { "name": "for", "type": "string" },
              { "name": "assignedElements", "type": "Array<HTMLElement>" }
            ],
            "events": []
          }
        },
        {
          "name": "fhir-value",
          "description": "\n---\n",
          "doc-url": "",
          "attributes": [
            {
              "name": "placeholder",
              "value": { "type": "string", "default": "'n/a'" }
            },
            { "name": "text", "value": { "type": "string", "default": "''" } },
            { "name": "variant", "value": { "type": "string" } },
            { "name": "link", "value": { "type": "string", "default": "''" } }
          ],
          "events": [],
          "js": {
            "properties": [
              { "name": "placeholder", "type": "string" },
              { "name": "text", "type": "string" },
              { "name": "variant", "type": "string" },
              { "name": "link", "type": "string" },
              { "name": "beforeSlot", "type": "Array<HTMLElement>" },
              { "name": "afterSlot", "type": "Array<HTMLElement>" }
            ],
            "events": []
          }
        },
        {
          "name": "fhir-primitive-wrapper",
          "description": "\n---\n",
          "doc-url": "",
          "attributes": [],
          "events": [],
          "js": { "properties": [], "events": [] }
        },
        {
          "name": "fhir-medication-batch",
          "description": "\n---\n\n\n### **Methods:**\n - **renderDisplay(config: _DisplayConfig_, data: _MedicationBatchData_): _TemplateResult[]_** - convenience method implemented by fhir model elements and resources. Internal and abstract classes should\ncontribute templateGenerators instead.\n- **renderStructure(config: _DisplayConfig_, data: _MedicationBatchData_): _TemplateResult[]_** - Convenience method implemented by fhir model elements and resources. Internal and abstract classes should\ncontribute templateGenerators instead.\n- **validate(data: _D_, validations: _Validations_, fetched: _boolean_): __** - validate data to find complex errors not covered by primitive types. Errors can be accessed through `this.errors`.\nit is recommended to call\n`super.validate(T)` as well.\n- **decorate(data: _Decorated<D>_, validations: _Validations_, fetched: _boolean_): __** - Override to extend the given data with some useful context\n- **isPrepared(providedData: _T_, decoratedData: _(T & Decorated) | null_): _void_** - This method is used to indicate that the data is ready.\n- **willRender(config: _DisplayConfig_, data: _Decorated<T> | null_, changes: _PropertyValues_): _void_** - Determines if the component will render based on the given parameters.\n- **hasRendered(config: _DisplayConfig_, data: _Decorated<D> | null_, haveChanged: _PropertyValues_): _void_** - Called after the component has rendered.\n",
          "doc-url": "",
          "attributes": [
            { "name": "label", "value": { "type": "string", "default": "''" } },
            { "name": "mode", "value": { "type": "DisplayMode" } },
            {
              "name": "open",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "forceclose",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "verbose",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "showerror",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "summary",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "summaryonly",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "headless",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "key",
              "description": "The key the element is known as in its parent data strucuture",
              "value": { "type": "string", "default": "''" }
            },
            {
              "name": "data",
              "description": "Element data",
              "value": { "type": "T", "default": "NoDataObject" }
            },
            { "name": "data-path", "value": { "type": "string" } },
            {
              "name": "errors",
              "description": "An array of objects representing validation errors.",
              "value": { "type": "ValidationErrors", "default": "{}" }
            }
          ],
          "events": [],
          "js": {
            "properties": [
              { "name": "label", "type": "string" },
              { "name": "mode", "type": "DisplayMode" },
              { "name": "open", "type": "boolean" },
              { "name": "forceclose", "type": "boolean" },
              { "name": "verbose", "type": "boolean" },
              { "name": "showerror", "type": "boolean" },
              { "name": "summary", "type": "boolean" },
              { "name": "summaryonly", "type": "boolean" },
              { "name": "headless", "type": "boolean" },
              {
                "name": "key",
                "description": "The key the element is known as in its parent data strucuture",
                "type": "string"
              },
              { "name": "data", "description": "Element data", "type": "T" },
              { "name": "dataPath", "type": "string" },
              {
                "name": "extendedData",
                "description": "The extendedData variable is used to store additional data of type T and an empty object type {}.\nIt can also hold a null value.",
                "type": "T & {} | null"
              },
              {
                "name": "errors",
                "description": "An array of objects representing validation errors.",
                "type": "ValidationErrors"
              },
              { "name": "dataContext", "type": "FhirDataContext" }
            ],
            "events": []
          }
        },
        {
          "name": "fhir-medication-ingredient",
          "description": "\n---\n\n\n### **Methods:**\n - **renderDisplay(config: _DisplayConfig_, data: _MedicationIngredientData_): _TemplateResult[]_** - convenience method implemented by fhir model elements and resources. Internal and abstract classes should\ncontribute templateGenerators instead.\n- **renderStructure(config: _DisplayConfig_, data: _MedicationIngredientData_): _TemplateResult[]_** - Convenience method implemented by fhir model elements and resources. Internal and abstract classes should\ncontribute templateGenerators instead.\n- **validate(data: _D_, validations: _Validations_, fetched: _boolean_): __** - validate data to find complex errors not covered by primitive types. Errors can be accessed through `this.errors`.\nit is recommended to call\n`super.validate(T)` as well.\n- **decorate(data: _Decorated<D>_, validations: _Validations_, fetched: _boolean_): __** - Override to extend the given data with some useful context\n- **isPrepared(providedData: _T_, decoratedData: _(T & Decorated) | null_): _void_** - This method is used to indicate that the data is ready.\n- **willRender(config: _DisplayConfig_, data: _Decorated<T> | null_, changes: _PropertyValues_): _void_** - Determines if the component will render based on the given parameters.\n- **hasRendered(config: _DisplayConfig_, data: _Decorated<D> | null_, haveChanged: _PropertyValues_): _void_** - Called after the component has rendered.\n",
          "doc-url": "",
          "attributes": [
            { "name": "label", "value": { "type": "string", "default": "''" } },
            { "name": "mode", "value": { "type": "DisplayMode" } },
            {
              "name": "open",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "forceclose",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "verbose",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "showerror",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "summary",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "summaryonly",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "headless",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "key",
              "description": "The key the element is known as in its parent data strucuture",
              "value": { "type": "string", "default": "''" }
            },
            {
              "name": "data",
              "description": "Element data",
              "value": { "type": "T", "default": "NoDataObject" }
            },
            { "name": "data-path", "value": { "type": "string" } },
            {
              "name": "errors",
              "description": "An array of objects representing validation errors.",
              "value": { "type": "ValidationErrors", "default": "{}" }
            }
          ],
          "events": [],
          "js": {
            "properties": [
              { "name": "label", "type": "string" },
              { "name": "mode", "type": "DisplayMode" },
              { "name": "open", "type": "boolean" },
              { "name": "forceclose", "type": "boolean" },
              { "name": "verbose", "type": "boolean" },
              { "name": "showerror", "type": "boolean" },
              { "name": "summary", "type": "boolean" },
              { "name": "summaryonly", "type": "boolean" },
              { "name": "headless", "type": "boolean" },
              {
                "name": "key",
                "description": "The key the element is known as in its parent data strucuture",
                "type": "string"
              },
              { "name": "data", "description": "Element data", "type": "T" },
              { "name": "dataPath", "type": "string" },
              {
                "name": "extendedData",
                "description": "The extendedData variable is used to store additional data of type T and an empty object type {}.\nIt can also hold a null value.",
                "type": "T & {} | null"
              },
              {
                "name": "errors",
                "description": "An array of objects representing validation errors.",
                "type": "ValidationErrors"
              },
              { "name": "dataContext", "type": "FhirDataContext" }
            ],
            "events": []
          }
        },
        {
          "name": "fhir-medication",
          "description": "\n---\n\n\n### **Methods:**\n - **renderDisplay(config: _DisplayConfig_, data: _Decorated<MedicationData>_): _TemplateResult[]_** - convenience method implemented by fhir model elements and resources. Internal and abstract classes should\ncontribute templateGenerators instead.\n- **renderStructure(config: _DisplayConfig_, data: _Decorated<MedicationData>_): _TemplateResult[]_** - Convenience method implemented by fhir model elements and resources. Internal and abstract classes should\ncontribute templateGenerators instead.\n- **validate(data: _D_, validations: _Validations_, fetched: _boolean_): __** - validate data to find complex errors not covered by primitive types. Errors can be accessed through `this.errors`.\nit is recommended to call\n`super.validate(T)` as well.\n- **decorate(data: _Decorated<D>_, validations: _Validations_, fetched: _boolean_): __** - Override to extend the given data with some useful context\n- **isPrepared(providedData: _T_, decoratedData: _(T & Decorated) | null_): _void_** - This method is used to indicate that the data is ready.\n- **willRender(config: _DisplayConfig_, data: _Decorated<T> | null_, changes: _PropertyValues_): _void_** - Determines if the component will render based on the given parameters.\n- **hasRendered(config: _DisplayConfig_, data: _Decorated<D> | null_, haveChanged: _PropertyValues_): _void_** - Called after the component has rendered.\n",
          "doc-url": "",
          "attributes": [
            { "name": "override-template", "value": { "type": "string" } },
            { "name": "label", "value": { "type": "string", "default": "''" } },
            { "name": "mode", "value": { "type": "DisplayMode" } },
            {
              "name": "open",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "forceclose",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "verbose",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "showerror",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "summary",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "summaryonly",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "headless",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "key",
              "description": "The key the element is known as in its parent data strucuture",
              "value": { "type": "string", "default": "''" }
            },
            {
              "name": "data",
              "description": "Element data",
              "value": { "type": "T", "default": "NoDataObject" }
            },
            { "name": "data-path", "value": { "type": "string" } },
            {
              "name": "errors",
              "description": "An array of objects representing validation errors.",
              "value": { "type": "ValidationErrors", "default": "{}" }
            }
          ],
          "events": [],
          "js": {
            "properties": [
              { "name": "overrideTemplate", "type": "string" },
              { "name": "summary", "type": "boolean" },
              { "name": "label", "type": "string" },
              { "name": "mode", "type": "DisplayMode" },
              { "name": "open", "type": "boolean" },
              { "name": "forceclose", "type": "boolean" },
              { "name": "verbose", "type": "boolean" },
              { "name": "showerror", "type": "boolean" },
              { "name": "summaryonly", "type": "boolean" },
              { "name": "headless", "type": "boolean" },
              {
                "name": "key",
                "description": "The key the element is known as in its parent data strucuture",
                "type": "string"
              },
              { "name": "data", "description": "Element data", "type": "T" },
              { "name": "dataPath", "type": "string" },
              {
                "name": "extendedData",
                "description": "The extendedData variable is used to store additional data of type T and an empty object type {}.\nIt can also hold a null value.",
                "type": "T & {} | null"
              },
              {
                "name": "errors",
                "description": "An array of objects representing validation errors.",
                "type": "ValidationErrors"
              },
              { "name": "dataContext", "type": "FhirDataContext" }
            ],
            "events": []
          }
        },
        {
          "name": "fhir-observation",
          "description": "\n---\n\n\n### **Methods:**\n - **renderDisplay(config: _DisplayConfig_, data: _Decorated<D>_, validations: _Validations_): _TemplateResult[]_** - convenience method implemented by fhir model elements and resources. Internal and abstract classes should\ncontribute templateGenerators instead.\n- **renderStructure(config: _DisplayConfig_, data: _Decorated<D>_, validations: _Validations_): _TemplateResult[]_** - Convenience method implemented by fhir model elements and resources. Internal and abstract classes should\ncontribute templateGenerators instead.\n- **validate(data: _D_, validations: _Validations_, fetched: _boolean_): __** - validate data to find complex errors not covered by primitive types. Errors can be accessed through `this.errors`.\nit is recommended to call\n`super.validate(T)` as well.\n- **decorate(data: _Decorated<D>_, validations: _Validations_, fetched: _boolean_): __** - Override to extend the given data with some useful context\n- **isPrepared(providedData: _T_, decoratedData: _(T & Decorated) | null_): _void_** - This method is used to indicate that the data is ready.\n- **willRender(config: _DisplayConfig_, data: _Decorated<T> | null_, changes: _PropertyValues_): _void_** - Determines if the component will render based on the given parameters.\n- **hasRendered(config: _DisplayConfig_, data: _Decorated<D> | null_, haveChanged: _PropertyValues_): _void_** - Called after the component has rendered.\n",
          "doc-url": "",
          "attributes": [
            { "name": "override-template", "value": { "type": "string" } },
            { "name": "label", "value": { "type": "string", "default": "''" } },
            { "name": "mode", "value": { "type": "DisplayMode" } },
            {
              "name": "open",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "forceclose",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "verbose",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "showerror",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "summary",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "summaryonly",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "headless",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "key",
              "description": "The key the element is known as in its parent data strucuture",
              "value": { "type": "string", "default": "''" }
            },
            {
              "name": "data",
              "description": "Element data",
              "value": { "type": "T", "default": "NoDataObject" }
            },
            { "name": "data-path", "value": { "type": "string" } },
            {
              "name": "errors",
              "description": "An array of objects representing validation errors.",
              "value": { "type": "ValidationErrors", "default": "{}" }
            }
          ],
          "events": [],
          "js": {
            "properties": [
              { "name": "overrideTemplate", "type": "string" },
              { "name": "summary", "type": "boolean" },
              { "name": "label", "type": "string" },
              { "name": "mode", "type": "DisplayMode" },
              { "name": "open", "type": "boolean" },
              { "name": "forceclose", "type": "boolean" },
              { "name": "verbose", "type": "boolean" },
              { "name": "showerror", "type": "boolean" },
              { "name": "summaryonly", "type": "boolean" },
              { "name": "headless", "type": "boolean" },
              {
                "name": "key",
                "description": "The key the element is known as in its parent data strucuture",
                "type": "string"
              },
              { "name": "data", "description": "Element data", "type": "T" },
              { "name": "dataPath", "type": "string" },
              {
                "name": "extendedData",
                "description": "The extendedData variable is used to store additional data of type T and an empty object type {}.\nIt can also hold a null value.",
                "type": "T & {} | null"
              },
              {
                "name": "errors",
                "description": "An array of objects representing validation errors.",
                "type": "ValidationErrors"
              },
              { "name": "dataContext", "type": "FhirDataContext" }
            ],
            "events": []
          }
        },
        {
          "name": "fhir-observation-definition",
          "description": "\n---\n\n\n### **Methods:**\n - **renderDisplay(config: _DisplayConfig_, data: _Decorated<D>_, validations: _Validations_): _TemplateResult[]_** - convenience method implemented by fhir model elements and resources. Internal and abstract classes should\ncontribute templateGenerators instead.\n- **renderStructure(config: _DisplayConfig_, data: _Decorated<D>_, validations: _Validations_): _TemplateResult[]_** - Convenience method implemented by fhir model elements and resources. Internal and abstract classes should\ncontribute templateGenerators instead.\n- **validate(data: _D_, validations: _Validations_, fetched: _boolean_): __** - validate data to find complex errors not covered by primitive types. Errors can be accessed through `this.errors`.\nit is recommended to call\n`super.validate(T)` as well.\n- **decorate(data: _Decorated<D>_, validations: _Validations_, fetched: _boolean_): __** - Override to extend the given data with some useful context\n- **isPrepared(providedData: _T_, decoratedData: _(T & Decorated) | null_): _void_** - This method is used to indicate that the data is ready.\n- **willRender(config: _DisplayConfig_, data: _Decorated<T> | null_, changes: _PropertyValues_): _void_** - Determines if the component will render based on the given parameters.\n- **hasRendered(config: _DisplayConfig_, data: _Decorated<D> | null_, haveChanged: _PropertyValues_): _void_** - Called after the component has rendered.\n",
          "doc-url": "",
          "attributes": [
            { "name": "override-template", "value": { "type": "string" } },
            { "name": "label", "value": { "type": "string", "default": "''" } },
            { "name": "mode", "value": { "type": "DisplayMode" } },
            {
              "name": "open",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "forceclose",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "verbose",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "showerror",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "summary",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "summaryonly",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "headless",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "key",
              "description": "The key the element is known as in its parent data strucuture",
              "value": { "type": "string", "default": "''" }
            },
            {
              "name": "data",
              "description": "Element data",
              "value": { "type": "T", "default": "NoDataObject" }
            },
            { "name": "data-path", "value": { "type": "string" } },
            {
              "name": "errors",
              "description": "An array of objects representing validation errors.",
              "value": { "type": "ValidationErrors", "default": "{}" }
            }
          ],
          "events": [],
          "js": {
            "properties": [
              { "name": "overrideTemplate", "type": "string" },
              { "name": "summary", "type": "boolean" },
              { "name": "label", "type": "string" },
              { "name": "mode", "type": "DisplayMode" },
              { "name": "open", "type": "boolean" },
              { "name": "forceclose", "type": "boolean" },
              { "name": "verbose", "type": "boolean" },
              { "name": "showerror", "type": "boolean" },
              { "name": "summaryonly", "type": "boolean" },
              { "name": "headless", "type": "boolean" },
              {
                "name": "key",
                "description": "The key the element is known as in its parent data strucuture",
                "type": "string"
              },
              { "name": "data", "description": "Element data", "type": "T" },
              { "name": "dataPath", "type": "string" },
              {
                "name": "extendedData",
                "description": "The extendedData variable is used to store additional data of type T and an empty object type {}.\nIt can also hold a null value.",
                "type": "T & {} | null"
              },
              {
                "name": "errors",
                "description": "An array of objects representing validation errors.",
                "type": "ValidationErrors"
              },
              { "name": "dataContext", "type": "FhirDataContext" }
            ],
            "events": []
          }
        },
        {
          "name": "fhir-patient-communication",
          "description": "\n---\n\n\n### **Methods:**\n - **renderDisplay(_: _DisplayConfig_, data: _Decorated<PatientCommunicationData>_): _TemplateResult[]_** - convenience method implemented by fhir model elements and resources. Internal and abstract classes should\ncontribute templateGenerators instead.\n- **renderStructure(_: _DisplayConfig_, data: _Decorated<PatientCommunicationData>_): _TemplateResult[]_** - Convenience method implemented by fhir model elements and resources. Internal and abstract classes should\ncontribute templateGenerators instead.\n- **validate(data: _D_, validations: _Validations_, fetched: _boolean_): __** - validate data to find complex errors not covered by primitive types. Errors can be accessed through `this.errors`.\nit is recommended to call\n`super.validate(T)` as well.\n- **decorate(data: _Decorated<D>_, validations: _Validations_, fetched: _boolean_): __** - Override to extend the given data with some useful context\n- **isPrepared(providedData: _T_, decoratedData: _(T & Decorated) | null_): _void_** - This method is used to indicate that the data is ready.\n- **willRender(config: _DisplayConfig_, data: _Decorated<T> | null_, changes: _PropertyValues_): _void_** - Determines if the component will render based on the given parameters.\n- **hasRendered(config: _DisplayConfig_, data: _Decorated<D> | null_, haveChanged: _PropertyValues_): _void_** - Called after the component has rendered.\n",
          "doc-url": "",
          "attributes": [
            { "name": "label", "value": { "type": "string", "default": "''" } },
            { "name": "mode", "value": { "type": "DisplayMode" } },
            {
              "name": "open",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "forceclose",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "verbose",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "showerror",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "summary",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "summaryonly",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "headless",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "key",
              "description": "The key the element is known as in its parent data strucuture",
              "value": { "type": "string", "default": "''" }
            },
            {
              "name": "data",
              "description": "Element data",
              "value": { "type": "T", "default": "NoDataObject" }
            },
            { "name": "data-path", "value": { "type": "string" } },
            {
              "name": "errors",
              "description": "An array of objects representing validation errors.",
              "value": { "type": "ValidationErrors", "default": "{}" }
            }
          ],
          "events": [],
          "js": {
            "properties": [
              { "name": "label", "type": "string" },
              { "name": "mode", "type": "DisplayMode" },
              { "name": "open", "type": "boolean" },
              { "name": "forceclose", "type": "boolean" },
              { "name": "verbose", "type": "boolean" },
              { "name": "showerror", "type": "boolean" },
              { "name": "summary", "type": "boolean" },
              { "name": "summaryonly", "type": "boolean" },
              { "name": "headless", "type": "boolean" },
              {
                "name": "key",
                "description": "The key the element is known as in its parent data strucuture",
                "type": "string"
              },
              { "name": "data", "description": "Element data", "type": "T" },
              { "name": "dataPath", "type": "string" },
              {
                "name": "extendedData",
                "description": "The extendedData variable is used to store additional data of type T and an empty object type {}.\nIt can also hold a null value.",
                "type": "T & {} | null"
              },
              {
                "name": "errors",
                "description": "An array of objects representing validation errors.",
                "type": "ValidationErrors"
              },
              { "name": "dataContext", "type": "FhirDataContext" }
            ],
            "events": []
          }
        },
        {
          "name": "fhir-patient-contact",
          "description": "\n---\n\n\n### **Methods:**\n - **renderDisplay(config: _DisplayConfig_, data: _Decorated<PatientContactData>_): _TemplateResult[]_** - convenience method implemented by fhir model elements and resources. Internal and abstract classes should\ncontribute templateGenerators instead.\n- **renderStructure(config: _DisplayConfig_, data: _Decorated<PatientContactData>_): _TemplateResult[]_** - Convenience method implemented by fhir model elements and resources. Internal and abstract classes should\ncontribute templateGenerators instead.\n- **validate(data: _D_, validations: _Validations_, fetched: _boolean_): __** - validate data to find complex errors not covered by primitive types. Errors can be accessed through `this.errors`.\nit is recommended to call\n`super.validate(T)` as well.\n- **decorate(data: _Decorated<D>_, validations: _Validations_, fetched: _boolean_): __** - Override to extend the given data with some useful context\n- **isPrepared(providedData: _T_, decoratedData: _(T & Decorated) | null_): _void_** - This method is used to indicate that the data is ready.\n- **willRender(config: _DisplayConfig_, data: _Decorated<T> | null_, changes: _PropertyValues_): _void_** - Determines if the component will render based on the given parameters.\n- **hasRendered(config: _DisplayConfig_, data: _Decorated<D> | null_, haveChanged: _PropertyValues_): _void_** - Called after the component has rendered.\n",
          "doc-url": "",
          "attributes": [
            { "name": "label", "value": { "type": "string", "default": "''" } },
            { "name": "mode", "value": { "type": "DisplayMode" } },
            {
              "name": "open",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "forceclose",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "verbose",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "showerror",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "summary",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "summaryonly",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "headless",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "key",
              "description": "The key the element is known as in its parent data strucuture",
              "value": { "type": "string", "default": "''" }
            },
            {
              "name": "data",
              "description": "Element data",
              "value": { "type": "T", "default": "NoDataObject" }
            },
            { "name": "data-path", "value": { "type": "string" } },
            {
              "name": "errors",
              "description": "An array of objects representing validation errors.",
              "value": { "type": "ValidationErrors", "default": "{}" }
            }
          ],
          "events": [],
          "js": {
            "properties": [
              { "name": "label", "type": "string" },
              { "name": "mode", "type": "DisplayMode" },
              { "name": "open", "type": "boolean" },
              { "name": "forceclose", "type": "boolean" },
              { "name": "verbose", "type": "boolean" },
              { "name": "showerror", "type": "boolean" },
              { "name": "summary", "type": "boolean" },
              { "name": "summaryonly", "type": "boolean" },
              { "name": "headless", "type": "boolean" },
              {
                "name": "key",
                "description": "The key the element is known as in its parent data strucuture",
                "type": "string"
              },
              { "name": "data", "description": "Element data", "type": "T" },
              { "name": "dataPath", "type": "string" },
              {
                "name": "extendedData",
                "description": "The extendedData variable is used to store additional data of type T and an empty object type {}.\nIt can also hold a null value.",
                "type": "T & {} | null"
              },
              {
                "name": "errors",
                "description": "An array of objects representing validation errors.",
                "type": "ValidationErrors"
              },
              { "name": "dataContext", "type": "FhirDataContext" }
            ],
            "events": []
          }
        },
        {
          "name": "fhir-patient-link",
          "description": "\n---\n\n\n### **Methods:**\n - **renderDisplay(_: _DisplayConfig_, data: _Decorated<PatientLinkData>_): _TemplateResult[]_** - convenience method implemented by fhir model elements and resources. Internal and abstract classes should\ncontribute templateGenerators instead.\n- **renderStructure(_: _DisplayConfig_, data: _Decorated<PatientLinkData>_): _TemplateResult[]_** - Convenience method implemented by fhir model elements and resources. Internal and abstract classes should\ncontribute templateGenerators instead.\n- **validate(data: _D_, validations: _Validations_, fetched: _boolean_): __** - validate data to find complex errors not covered by primitive types. Errors can be accessed through `this.errors`.\nit is recommended to call\n`super.validate(T)` as well.\n- **decorate(data: _Decorated<D>_, validations: _Validations_, fetched: _boolean_): __** - Override to extend the given data with some useful context\n- **isPrepared(providedData: _T_, decoratedData: _(T & Decorated) | null_): _void_** - This method is used to indicate that the data is ready.\n- **willRender(config: _DisplayConfig_, data: _Decorated<T> | null_, changes: _PropertyValues_): _void_** - Determines if the component will render based on the given parameters.\n- **hasRendered(config: _DisplayConfig_, data: _Decorated<D> | null_, haveChanged: _PropertyValues_): _void_** - Called after the component has rendered.\n",
          "doc-url": "",
          "attributes": [
            { "name": "label", "value": { "type": "string", "default": "''" } },
            { "name": "mode", "value": { "type": "DisplayMode" } },
            {
              "name": "open",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "forceclose",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "verbose",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "showerror",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "summary",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "summaryonly",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "headless",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "key",
              "description": "The key the element is known as in its parent data strucuture",
              "value": { "type": "string", "default": "''" }
            },
            {
              "name": "data",
              "description": "Element data",
              "value": { "type": "T", "default": "NoDataObject" }
            },
            { "name": "data-path", "value": { "type": "string" } },
            {
              "name": "errors",
              "description": "An array of objects representing validation errors.",
              "value": { "type": "ValidationErrors", "default": "{}" }
            }
          ],
          "events": [],
          "js": {
            "properties": [
              { "name": "label", "type": "string" },
              { "name": "mode", "type": "DisplayMode" },
              { "name": "open", "type": "boolean" },
              { "name": "forceclose", "type": "boolean" },
              { "name": "verbose", "type": "boolean" },
              { "name": "showerror", "type": "boolean" },
              { "name": "summary", "type": "boolean" },
              { "name": "summaryonly", "type": "boolean" },
              { "name": "headless", "type": "boolean" },
              {
                "name": "key",
                "description": "The key the element is known as in its parent data strucuture",
                "type": "string"
              },
              { "name": "data", "description": "Element data", "type": "T" },
              { "name": "dataPath", "type": "string" },
              {
                "name": "extendedData",
                "description": "The extendedData variable is used to store additional data of type T and an empty object type {}.\nIt can also hold a null value.",
                "type": "T & {} | null"
              },
              {
                "name": "errors",
                "description": "An array of objects representing validation errors.",
                "type": "ValidationErrors"
              },
              { "name": "dataContext", "type": "FhirDataContext" }
            ],
            "events": []
          }
        },
        {
          "name": "fhir-patient",
          "description": "\n---\n\n\n### **Methods:**\n - **renderDisplay(config: _DisplayConfig_, data: _PatientData_): _TemplateResult[]_** - convenience method implemented by fhir model elements and resources. Internal and abstract classes should\ncontribute templateGenerators instead.\n- **renderStructure(config: _DisplayConfig_, data: _PatientData_, validations: _Validations_): _TemplateResult[]_** - Convenience method implemented by fhir model elements and resources. Internal and abstract classes should\ncontribute templateGenerators instead.\n- **validate(data: _PatientData_, validations: _Validations_, fetched: _boolean_): __** - validate data to find complex errors not covered by primitive types. Errors can be accessed through `this.errors`.\nit is recommended to call\n`super.validate(T)` as well.\n- **decorate(data: _Decorated<D>_, validations: _Validations_, fetched: _boolean_): __** - Override to extend the given data with some useful context\n- **isPrepared(providedData: _T_, decoratedData: _(T & Decorated) | null_): _void_** - This method is used to indicate that the data is ready.\n- **willRender(config: _DisplayConfig_, data: _Decorated<T> | null_, changes: _PropertyValues_): _void_** - Determines if the component will render based on the given parameters.\n- **hasRendered(config: _DisplayConfig_, data: _Decorated<D> | null_, haveChanged: _PropertyValues_): _void_** - Called after the component has rendered.\n",
          "doc-url": "",
          "attributes": [
            { "name": "override-template", "value": { "type": "string" } },
            { "name": "label", "value": { "type": "string", "default": "''" } },
            { "name": "mode", "value": { "type": "DisplayMode" } },
            {
              "name": "open",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "forceclose",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "verbose",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "showerror",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "summary",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "summaryonly",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "headless",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "key",
              "description": "The key the element is known as in its parent data strucuture",
              "value": { "type": "string", "default": "''" }
            },
            {
              "name": "data",
              "description": "Element data",
              "value": { "type": "T", "default": "NoDataObject" }
            },
            { "name": "data-path", "value": { "type": "string" } },
            {
              "name": "errors",
              "description": "An array of objects representing validation errors.",
              "value": { "type": "ValidationErrors", "default": "{}" }
            }
          ],
          "events": [],
          "js": {
            "properties": [
              { "name": "overrideTemplate", "type": "string" },
              { "name": "summary", "type": "boolean" },
              { "name": "label", "type": "string" },
              { "name": "mode", "type": "DisplayMode" },
              { "name": "open", "type": "boolean" },
              { "name": "forceclose", "type": "boolean" },
              { "name": "verbose", "type": "boolean" },
              { "name": "showerror", "type": "boolean" },
              { "name": "summaryonly", "type": "boolean" },
              { "name": "headless", "type": "boolean" },
              {
                "name": "key",
                "description": "The key the element is known as in its parent data strucuture",
                "type": "string"
              },
              { "name": "data", "description": "Element data", "type": "T" },
              { "name": "dataPath", "type": "string" },
              {
                "name": "extendedData",
                "description": "The extendedData variable is used to store additional data of type T and an empty object type {}.\nIt can also hold a null value.",
                "type": "T & {} | null"
              },
              {
                "name": "errors",
                "description": "An array of objects representing validation errors.",
                "type": "ValidationErrors"
              },
              { "name": "dataContext", "type": "FhirDataContext" }
            ],
            "events": []
          }
        },
        {
          "name": "fhir-substance-ingredient",
          "description": "\n---\n\n\n### **Methods:**\n - **renderDisplay(config: _DisplayConfig_, data: _SubstanceIngredientData | SubstanceIngredientReferenceData_): _TemplateResult[]_** - convenience method implemented by fhir model elements and resources. Internal and abstract classes should\ncontribute templateGenerators instead.\n- **renderStructure(config: _DisplayConfig_, data: _SubstanceIngredientData | SubstanceIngredientReferenceData_): _TemplateResult[]_** - Convenience method implemented by fhir model elements and resources. Internal and abstract classes should\ncontribute templateGenerators instead.\n- **validate(data: _D_, validations: _Validations_, fetched: _boolean_): __** - validate data to find complex errors not covered by primitive types. Errors can be accessed through `this.errors`.\nit is recommended to call\n`super.validate(T)` as well.\n- **decorate(data: _Decorated<D>_, validations: _Validations_, fetched: _boolean_): __** - Override to extend the given data with some useful context\n- **isPrepared(providedData: _T_, decoratedData: _(T & Decorated) | null_): _void_** - This method is used to indicate that the data is ready.\n- **willRender(config: _DisplayConfig_, data: _Decorated<T> | null_, changes: _PropertyValues_): _void_** - Determines if the component will render based on the given parameters.\n- **hasRendered(config: _DisplayConfig_, data: _Decorated<D> | null_, haveChanged: _PropertyValues_): _void_** - Called after the component has rendered.\n",
          "doc-url": "",
          "attributes": [
            { "name": "label", "value": { "type": "string", "default": "''" } },
            { "name": "mode", "value": { "type": "DisplayMode" } },
            {
              "name": "open",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "forceclose",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "verbose",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "showerror",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "summary",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "summaryonly",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "headless",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "key",
              "description": "The key the element is known as in its parent data strucuture",
              "value": { "type": "string", "default": "''" }
            },
            {
              "name": "data",
              "description": "Element data",
              "value": { "type": "T", "default": "NoDataObject" }
            },
            { "name": "data-path", "value": { "type": "string" } },
            {
              "name": "errors",
              "description": "An array of objects representing validation errors.",
              "value": { "type": "ValidationErrors", "default": "{}" }
            }
          ],
          "events": [],
          "js": {
            "properties": [
              { "name": "label", "type": "string" },
              { "name": "mode", "type": "DisplayMode" },
              { "name": "open", "type": "boolean" },
              { "name": "forceclose", "type": "boolean" },
              { "name": "verbose", "type": "boolean" },
              { "name": "showerror", "type": "boolean" },
              { "name": "summary", "type": "boolean" },
              { "name": "summaryonly", "type": "boolean" },
              { "name": "headless", "type": "boolean" },
              {
                "name": "key",
                "description": "The key the element is known as in its parent data strucuture",
                "type": "string"
              },
              { "name": "data", "description": "Element data", "type": "T" },
              { "name": "dataPath", "type": "string" },
              {
                "name": "extendedData",
                "description": "The extendedData variable is used to store additional data of type T and an empty object type {}.\nIt can also hold a null value.",
                "type": "T & {} | null"
              },
              {
                "name": "errors",
                "description": "An array of objects representing validation errors.",
                "type": "ValidationErrors"
              },
              { "name": "dataContext", "type": "FhirDataContext" }
            ],
            "events": []
          }
        },
        {
          "name": "fhir-substance",
          "description": "\n---\n\n\n### **Methods:**\n - **renderDisplay(config: _DisplayConfig_, data: _SubstanceData_): _TemplateResult[]_** - convenience method implemented by fhir model elements and resources. Internal and abstract classes should\ncontribute templateGenerators instead.\n- **renderStructure(config: _DisplayConfig_, data: _SubstanceData_): _TemplateResult[]_** - Convenience method implemented by fhir model elements and resources. Internal and abstract classes should\ncontribute templateGenerators instead.\n- **validate(data: _D_, validations: _Validations_, fetched: _boolean_): __** - validate data to find complex errors not covered by primitive types. Errors can be accessed through `this.errors`.\nit is recommended to call\n`super.validate(T)` as well.\n- **decorate(data: _Decorated<D>_, validations: _Validations_, fetched: _boolean_): __** - Override to extend the given data with some useful context\n- **isPrepared(providedData: _T_, decoratedData: _(T & Decorated) | null_): _void_** - This method is used to indicate that the data is ready.\n- **willRender(config: _DisplayConfig_, data: _Decorated<T> | null_, changes: _PropertyValues_): _void_** - Determines if the component will render based on the given parameters.\n- **hasRendered(config: _DisplayConfig_, data: _Decorated<D> | null_, haveChanged: _PropertyValues_): _void_** - Called after the component has rendered.\n",
          "doc-url": "",
          "attributes": [
            { "name": "override-template", "value": { "type": "string" } },
            { "name": "label", "value": { "type": "string", "default": "''" } },
            { "name": "mode", "value": { "type": "DisplayMode" } },
            {
              "name": "open",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "forceclose",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "verbose",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "showerror",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "summary",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "summaryonly",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "headless",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "key",
              "description": "The key the element is known as in its parent data strucuture",
              "value": { "type": "string", "default": "''" }
            },
            {
              "name": "data",
              "description": "Element data",
              "value": { "type": "T", "default": "NoDataObject" }
            },
            { "name": "data-path", "value": { "type": "string" } },
            {
              "name": "errors",
              "description": "An array of objects representing validation errors.",
              "value": { "type": "ValidationErrors", "default": "{}" }
            }
          ],
          "events": [],
          "js": {
            "properties": [
              { "name": "overrideTemplate", "type": "string" },
              { "name": "summary", "type": "boolean" },
              { "name": "label", "type": "string" },
              { "name": "mode", "type": "DisplayMode" },
              { "name": "open", "type": "boolean" },
              { "name": "forceclose", "type": "boolean" },
              { "name": "verbose", "type": "boolean" },
              { "name": "showerror", "type": "boolean" },
              { "name": "summaryonly", "type": "boolean" },
              { "name": "headless", "type": "boolean" },
              {
                "name": "key",
                "description": "The key the element is known as in its parent data strucuture",
                "type": "string"
              },
              { "name": "data", "description": "Element data", "type": "T" },
              { "name": "dataPath", "type": "string" },
              {
                "name": "extendedData",
                "description": "The extendedData variable is used to store additional data of type T and an empty object type {}.\nIt can also hold a null value.",
                "type": "T & {} | null"
              },
              {
                "name": "errors",
                "description": "An array of objects representing validation errors.",
                "type": "ValidationErrors"
              },
              { "name": "dataContext", "type": "FhirDataContext" }
            ],
            "events": []
          }
        },
        {
          "name": "fhir-meta",
          "description": "\n---\n\n\n### **Methods:**\n - **renderDisplay(config: _DisplayConfig_, data: _MetaData_): _TemplateResult[]_** - convenience method implemented by fhir model elements and resources. Internal and abstract classes should\ncontribute templateGenerators instead.\n- **renderStructure(config: _DisplayConfig_, data: _MetaData_): _TemplateResult[]_** - Convenience method implemented by fhir model elements and resources. Internal and abstract classes should\ncontribute templateGenerators instead.\n- **validate(data: _D_, validations: _Validations_, fetched: _boolean_): __** - validate data to find complex errors not covered by primitive types. Errors can be accessed through `this.errors`.\nit is recommended to call\n`super.validate(T)` as well.\n- **decorate(data: _Decorated<D>_, validations: _Validations_, fetched: _boolean_): __** - Override to extend the given data with some useful context\n- **isPrepared(providedData: _T_, decoratedData: _(T & Decorated) | null_): _void_** - This method is used to indicate that the data is ready.\n- **willRender(config: _DisplayConfig_, data: _Decorated<T> | null_, changes: _PropertyValues_): _void_** - Determines if the component will render based on the given parameters.\n- **hasRendered(config: _DisplayConfig_, data: _Decorated<D> | null_, haveChanged: _PropertyValues_): _void_** - Called after the component has rendered.\n",
          "doc-url": "",
          "attributes": [
            { "name": "label", "value": { "type": "string", "default": "''" } },
            { "name": "mode", "value": { "type": "DisplayMode" } },
            {
              "name": "open",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "forceclose",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "verbose",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "showerror",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "summary",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "summaryonly",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "headless",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "key",
              "description": "The key the element is known as in its parent data strucuture",
              "value": { "type": "string", "default": "''" }
            },
            {
              "name": "data",
              "description": "Element data",
              "value": { "type": "T", "default": "NoDataObject" }
            },
            { "name": "data-path", "value": { "type": "string" } },
            {
              "name": "errors",
              "description": "An array of objects representing validation errors.",
              "value": { "type": "ValidationErrors", "default": "{}" }
            }
          ],
          "events": [],
          "js": {
            "properties": [
              { "name": "label", "type": "string" },
              { "name": "mode", "type": "DisplayMode" },
              { "name": "open", "type": "boolean" },
              { "name": "forceclose", "type": "boolean" },
              { "name": "verbose", "type": "boolean" },
              { "name": "showerror", "type": "boolean" },
              { "name": "summary", "type": "boolean" },
              { "name": "summaryonly", "type": "boolean" },
              { "name": "headless", "type": "boolean" },
              {
                "name": "key",
                "description": "The key the element is known as in its parent data strucuture",
                "type": "string"
              },
              { "name": "data", "description": "Element data", "type": "T" },
              { "name": "dataPath", "type": "string" },
              {
                "name": "extendedData",
                "description": "The extendedData variable is used to store additional data of type T and an empty object type {}.\nIt can also hold a null value.",
                "type": "T & {} | null"
              },
              {
                "name": "errors",
                "description": "An array of objects representing validation errors.",
                "type": "ValidationErrors"
              },
              { "name": "dataContext", "type": "FhirDataContext" }
            ],
            "events": []
          }
        },
        {
          "name": "fhir-narrative",
          "description": "\n---\n\n\n### **Methods:**\n - **renderDisplay(config: _DisplayConfig_, data: _NarrativeData_): _TemplateResult[]_** - convenience method implemented by fhir model elements and resources. Internal and abstract classes should\ncontribute templateGenerators instead.\n- **renderStructure(config: _DisplayConfig_, data: _NarrativeData_): _TemplateResult[]_** - Convenience method implemented by fhir model elements and resources. Internal and abstract classes should\ncontribute templateGenerators instead.\n- **validate(data: _D_, validations: _Validations_, fetched: _boolean_): __** - validate data to find complex errors not covered by primitive types. Errors can be accessed through `this.errors`.\nit is recommended to call\n`super.validate(T)` as well.\n- **decorate(data: _Decorated<D>_, validations: _Validations_, fetched: _boolean_): __** - Override to extend the given data with some useful context\n- **isPrepared(providedData: _T_, decoratedData: _(T & Decorated) | null_): _void_** - This method is used to indicate that the data is ready.\n- **willRender(config: _DisplayConfig_, data: _Decorated<T> | null_, changes: _PropertyValues_): _void_** - Determines if the component will render based on the given parameters.\n- **hasRendered(config: _DisplayConfig_, data: _Decorated<D> | null_, haveChanged: _PropertyValues_): _void_** - Called after the component has rendered.\n",
          "doc-url": "",
          "attributes": [
            { "name": "status", "value": { "type": "string" } },
            { "name": "label", "value": { "type": "string", "default": "''" } },
            { "name": "mode", "value": { "type": "DisplayMode" } },
            {
              "name": "open",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "forceclose",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "verbose",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "showerror",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "summary",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "summaryonly",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "headless",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "key",
              "description": "The key the element is known as in its parent data strucuture",
              "value": { "type": "string", "default": "''" }
            },
            {
              "name": "data",
              "description": "Element data",
              "value": { "type": "T", "default": "NoDataObject" }
            },
            { "name": "data-path", "value": { "type": "string" } },
            {
              "name": "errors",
              "description": "An array of objects representing validation errors.",
              "value": { "type": "ValidationErrors", "default": "{}" }
            }
          ],
          "events": [],
          "js": {
            "properties": [
              { "name": "status", "type": "string" },
              { "name": "label", "type": "string" },
              { "name": "mode", "type": "DisplayMode" },
              { "name": "open", "type": "boolean" },
              { "name": "forceclose", "type": "boolean" },
              { "name": "verbose", "type": "boolean" },
              { "name": "showerror", "type": "boolean" },
              { "name": "summary", "type": "boolean" },
              { "name": "summaryonly", "type": "boolean" },
              { "name": "headless", "type": "boolean" },
              {
                "name": "key",
                "description": "The key the element is known as in its parent data strucuture",
                "type": "string"
              },
              { "name": "data", "description": "Element data", "type": "T" },
              { "name": "dataPath", "type": "string" },
              {
                "name": "extendedData",
                "description": "The extendedData variable is used to store additional data of type T and an empty object type {}.\nIt can also hold a null value.",
                "type": "T & {} | null"
              },
              {
                "name": "errors",
                "description": "An array of objects representing validation errors.",
                "type": "ValidationErrors"
              },
              { "name": "dataContext", "type": "FhirDataContext" }
            ],
            "events": []
          }
        },
        {
          "name": "fhir-reference",
          "description": "\n---\n\n\n### **Methods:**\n - **renderDisplay(config: _DisplayConfig_, data: _ReferenceData_, validation: _Validations_): _TemplateResult[]_** - convenience method implemented by fhir model elements and resources. Internal and abstract classes should\ncontribute templateGenerators instead.\n- **renderStructure(config: _DisplayConfig_, data: _ReferenceData_, validations: _Validations_): _TemplateResult[]_** - Convenience method implemented by fhir model elements and resources. Internal and abstract classes should\ncontribute templateGenerators instead.\n- **validate(data: _ReferenceData_, validations: _Validations_, fetched: _boolean_): __** - validate data to find complex errors not covered by primitive types. Errors can be accessed through `this.errors`.\nit is recommended to call\n`super.validate(T)` as well.\n- **decorate(data: _Decorated<D>_, validations: _Validations_, fetched: _boolean_): __** - Override to extend the given data with some useful context\n- **isPrepared(providedData: _T_, decoratedData: _(T & Decorated) | null_): _void_** - This method is used to indicate that the data is ready.\n- **willRender(config: _DisplayConfig_, data: _Decorated<T> | null_, changes: _PropertyValues_): _void_** - Determines if the component will render based on the given parameters.\n- **hasRendered(config: _DisplayConfig_, data: _Decorated<D> | null_, haveChanged: _PropertyValues_): _void_** - Called after the component has rendered.\n",
          "doc-url": "",
          "attributes": [
            { "name": "label", "value": { "type": "string", "default": "''" } },
            { "name": "mode", "value": { "type": "DisplayMode" } },
            {
              "name": "open",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "forceclose",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "verbose",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "showerror",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "summary",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "summaryonly",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "headless",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "key",
              "description": "The key the element is known as in its parent data strucuture",
              "value": { "type": "string", "default": "''" }
            },
            {
              "name": "data",
              "description": "Element data",
              "value": { "type": "T", "default": "NoDataObject" }
            },
            { "name": "data-path", "value": { "type": "string" } },
            {
              "name": "errors",
              "description": "An array of objects representing validation errors.",
              "value": { "type": "ValidationErrors", "default": "{}" }
            }
          ],
          "events": [],
          "js": {
            "properties": [
              { "name": "label", "type": "string" },
              { "name": "mode", "type": "DisplayMode" },
              { "name": "open", "type": "boolean" },
              { "name": "forceclose", "type": "boolean" },
              { "name": "verbose", "type": "boolean" },
              { "name": "showerror", "type": "boolean" },
              { "name": "summary", "type": "boolean" },
              { "name": "summaryonly", "type": "boolean" },
              { "name": "headless", "type": "boolean" },
              {
                "name": "key",
                "description": "The key the element is known as in its parent data strucuture",
                "type": "string"
              },
              { "name": "data", "description": "Element data", "type": "T" },
              { "name": "dataPath", "type": "string" },
              {
                "name": "extendedData",
                "description": "The extendedData variable is used to store additional data of type T and an empty object type {}.\nIt can also hold a null value.",
                "type": "T & {} | null"
              },
              {
                "name": "errors",
                "description": "An array of objects representing validation errors.",
                "type": "ValidationErrors"
              },
              { "name": "dataContext", "type": "FhirDataContext" }
            ],
            "events": []
          }
        },
        {
          "name": "fhir-badge-group",
          "description": "\n---\n",
          "doc-url": "",
          "attributes": [
            {
              "name": "badge-resource",
              "value": { "type": "string", "default": "''" }
            },
            {
              "name": "badge-summary",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "badge-constraint",
              "value": { "type": "boolean", "default": "false" }
            }
          ],
          "events": [],
          "js": {
            "properties": [
              { "name": "badgeResource", "type": "string" },
              { "name": "badgeSummary", "type": "boolean" },
              { "name": "badgeConstraint", "type": "boolean" },
              {
                "name": "badges",
                "type": "{ label: string, type: BadgeType }[]"
              }
            ],
            "events": []
          }
        },
        {
          "name": "fhir-structure-wrapper",
          "description": "Custom element for wrapping primitive content.\n---\n\n\n### **Slots:**\n - **wrapper** - undefined",
          "doc-url": "",
          "attributes": [
            {
              "name": "variant",
              "value": {
                "type": "'primary' | 'secondary' | 'validation-error' | undefined"
              }
            },
            { "name": "label", "value": { "type": "string", "default": "''" } },
            {
              "name": "resourceId",
              "value": { "type": "string", "default": "''" }
            },
            {
              "name": "fhirType",
              "value": { "type": "string", "default": "''" }
            },
            {
              "name": "hide",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "open",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "forceclose",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "summary",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "summaryonly",
              "value": { "type": "boolean", "default": "false" }
            },
            { "name": "mode", "value": { "type": "DisplayMode" } }
          ],
          "slots": [{ "name": "wrapper" }],
          "events": [],
          "js": {
            "properties": [
              {
                "name": "variant",
                "type": "'primary' | 'secondary' | 'validation-error' | undefined"
              },
              { "name": "label", "type": "string" },
              { "name": "resourceId", "type": "string" },
              { "name": "fhirType", "type": "string" },
              { "name": "hide", "type": "boolean" },
              { "name": "open", "type": "boolean" },
              { "name": "forceclose", "type": "boolean" },
              { "name": "summary", "type": "boolean" }
            ],
            "events": []
          }
        },
        {
          "name": "fhir-wrapper",
          "description": "Custom element for wrapping primitive content.\n---\n\n\n### **Slots:**\n - **wrapper** - undefined",
          "doc-url": "",
          "attributes": [
            { "name": "label", "value": { "type": "string", "default": "''" } },
            {
              "name": "fhirType",
              "value": { "type": "string", "default": "''" }
            },
            {
              "name": "variant",
              "value": {
                "type": "'primary' | 'secondary' | 'validation-error' | 'none'",
                "default": "'none'"
              }
            },
            {
              "name": "hidelabel",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "open",
              "value": { "type": "boolean", "default": "false" }
            },
            { "name": "mode", "value": { "type": "DisplayMode" } },
            {
              "name": "summary",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "summaryonly",
              "value": { "type": "boolean", "default": "false" }
            }
          ],
          "slots": [{ "name": "wrapper" }],
          "events": [],
          "js": {
            "properties": [
              { "name": "label", "type": "string" },
              { "name": "fhirType", "type": "string" },
              {
                "name": "variant",
                "type": "'primary' | 'secondary' | 'validation-error' | 'none'"
              },
              { "name": "hidelabel", "type": "boolean" },
              { "name": "open", "type": "boolean" },
              { "name": "mode", "type": "DisplayMode" },
              { "name": "summary", "type": "boolean" },
              { "name": "summaryonly", "type": "boolean" }
            ],
            "events": []
          }
        },
        {
          "name": "fhir-wrapper-2",
          "description": "\n---\n",
          "doc-url": "",
          "attributes": [
            {
              "name": "details",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "key",
              "value": { "type": "string", "default": "'items'" }
            },
            { "name": "label", "value": { "type": "string", "default": "''" } },
            {
              "name": "badge-resource",
              "value": { "type": "string", "default": "''" }
            },
            {
              "name": "badge-summary",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "badge-constraint",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "open",
              "value": { "type": "boolean", "default": "false" }
            }
          ],
          "events": [],
          "js": {
            "properties": [
              { "name": "details", "type": "boolean" },
              { "name": "key", "type": "string" },
              { "name": "label", "type": "string" },
              { "name": "badgeResource", "type": "string" },
              { "name": "badgeSummary", "type": "boolean" },
              { "name": "badgeConstraint", "type": "boolean" },
              { "name": "open", "type": "boolean" }
            ],
            "events": []
          }
        }
      ]
    },
    "css": {
      "properties": [],
      "pseudo-elements": []
    }
  }
}
